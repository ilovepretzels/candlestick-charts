{"version":3,"sources":["App.js","serviceWorker.js","index.js"],"names":["baseName","baseUrl","Chart","_this","Object","classCallCheck","this","possibleConstructorReturn","getPrototypeOf","call","state","data","_this2","fetch","props","sourceData","then","response","json","jsonData","setState","map","values","sort","options","title","text","name","series","type","tooltip","valueDecimals","react_default","a","createElement","highcharts_react_min_default","highcharts","Highcharts","constructorType","React","Component","App","esm","App_Chart","Boolean","window","location","hostname","match","ReactDOM","render","src_App","document","getElementById","navigator","serviceWorker","ready","registration","unregister"],"mappings":"kRAMMA,SAAW,6BACXC,EAAU,2DAEVC,cACN,SAAAA,IAAc,IAAAC,EAAA,OAAAC,OAAAC,EAAA,EAAAD,CAAAE,KAAAJ,IACVC,EAAAC,OAAAG,EAAA,EAAAH,CAAAE,KAAAF,OAAAI,EAAA,EAAAJ,CAAAF,GAAAO,KAAAH,QACKI,MAAQ,CACXC,KAAM,IAHER,mFAOM,IAAAS,EAAAN,KAClBO,MAAMP,KAAKQ,MAAMC,YAChBC,KAAK,SAAAC,GAAQ,OAAIA,EAASC,SAC1BF,KAAK,SAACG,GACLP,EAAKQ,SAAS,CAAET,KAAMQ,EAASE,IAAIjB,OAAOkB,QAAQC,4CAKpD,IAAMC,EAAU,CACdC,MAAO,CACRC,KAAMpB,KAAKQ,MAAMa,MAEhBC,OAAQ,CACN,CACEC,KAAM,cACNlB,KAAML,KAAKI,MAAMC,KACjBmB,QAAS,CACfC,cAAe,MAKb,OACEC,EAAAC,EAAAC,cAAA,WACEF,EAAAC,EAAAC,cAACC,EAAAF,EAAD,CACEG,WAAYC,IACZC,gBAAiB,aACjBd,QAASA,YApCCe,IAAMC,WAoFXC,mLAvCX,OACET,EAAAC,EAAAC,cAAA,WACEF,EAAAC,EAAAC,cAAA,oBACAF,EAAAC,EAAAC,cAACQ,EAAA,EAAD,KACEV,EAAAC,EAAAC,cAACQ,EAAA,EAAD,KACEV,EAAAC,EAAAC,cAACQ,EAAA,EAAD,cACAV,EAAAC,EAAAC,cAACQ,EAAA,EAAD,gCAEFV,EAAAC,EAAAC,cAACQ,EAAA,EAAD,KACEV,EAAAC,EAAAC,cAACS,EAAD,CAAOhB,KAAM3B,EAAUe,WAAYd,KAErC+B,EAAAC,EAAAC,cAACQ,EAAA,EAAD,KACEV,EAAAC,EAAAC,cAACQ,EAAA,EAAD,KACEV,EAAAC,EAAAC,cAACQ,EAAA,EAAD,KACEV,EAAAC,EAAAC,cAACQ,EAAA,EAAD,cACAV,EAAAC,EAAAC,cAACQ,EAAA,EAAD,cACAV,EAAAC,EAAAC,cAACQ,EAAA,EAAD,eACAV,EAAAC,EAAAC,cAACQ,EAAA,EAAD,gBAEFV,EAAAC,EAAAC,cAACQ,EAAA,EAAD,KACEV,EAAAC,EAAAC,cAACS,EAAD,CAAOhB,KAAM3B,EAAW,WAAYe,WAAYd,EAAU,iBAE5D+B,EAAAC,EAAAC,cAACQ,EAAA,EAAD,KACEV,EAAAC,EAAAC,cAACS,EAAD,CAAOhB,KAAM3B,EAAW,WAAYe,WAAYd,EAAU,iBAE5D+B,EAAAC,EAAAC,cAACQ,EAAA,EAAD,KACEV,EAAAC,EAAAC,cAACS,EAAD,CAAOhB,KAAM3B,EAAW,YAAae,WAAYd,EAAU,kBAE7D+B,EAAAC,EAAAC,cAACQ,EAAA,EAAD,KACEV,EAAAC,EAAAC,cAACS,EAAD,CAAOhB,KAAM3B,EAAW,YAAae,WAAYd,EAAU,6BA/BzDsC,IAAMC,WCxCJI,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2DCZNC,IAASC,OAAOlB,EAAAC,EAAAC,cAACiB,EAAD,MAASC,SAASC,eAAe,SD2H3C,kBAAmBC,WACrBA,UAAUC,cAAcC,MAAMxC,KAAK,SAAAyC,GACjCA,EAAaC","file":"static/js/main.a6328dbf.chunk.js","sourcesContent":["import React from 'react';\nimport Highcharts from \"highcharts/highstock\";\nimport HighchartsReact from \"highcharts-react-official\";\nimport { Tab, Tabs, TabList, TabPanel } from 'react-tabs';\nimport \"react-tabs/style/react-tabs.css\";\n\nconst baseName = 'EUR/USD candlestick chart';\nconst baseUrl = 'https://www.fxempire.com/api/v1/en/markets/eur-usd/chart';\n\nclass Chart extends React.Component {\nconstructor() {\n    super();\n    this.state = {\n      data: [],\n    };\n}\n\ncomponentDidMount() {\n  fetch(this.props.sourceData)\n  .then(response => response.json())\n  .then((jsonData) => {\n    this.setState({ data: jsonData.map(Object.values).sort() });\n  })\n}\n\nrender() {\n  const options = {\n    title: {\n   text: this.props.name\n },\n    series: [\n      {\n        type: 'candlestick',\n        data: this.state.data,\n        tooltip: {\n  valueDecimals: 5\n}\n      }\n    ]\n  };\n    return (\n      <div>\n        <HighchartsReact\n          highcharts={Highcharts}\n          constructorType={\"stockChart\"}\n          options={options}\n        />\n      </div>\n    );\n  }\n}\n\nclass App extends React.Component {\n  render() {\n    return (\n      <div>\n        <h1>Charts</h1>\n        <Tabs>\n          <TabList>\n            <Tab>Chart</Tab>\n            <Tab>Charts with timestamps</Tab>\n          </TabList>\n          <TabPanel>\n            <Chart name={baseName} sourceData={baseUrl} />\n          </TabPanel>\n          <TabPanel>\n            <Tabs>\n              <TabList>\n                <Tab>1 min</Tab>\n                <Tab>5 min</Tab>\n                <Tab>1 hour</Tab>\n                <Tab>1 week</Tab>\n              </TabList>\n              <TabPanel>\n                <Chart name={baseName + ' (1 min)'} sourceData={baseUrl + '?time=MIN_1'} />\n              </TabPanel>\n              <TabPanel>\n                <Chart name={baseName + ' (5 min)'} sourceData={baseUrl + '?time=MIN_5'} />\n              </TabPanel>\n              <TabPanel>\n                <Chart name={baseName + ' (1 hour)'} sourceData={baseUrl + '?time=HOUR_1'} />\n              </TabPanel>\n              <TabPanel>\n                <Chart name={baseName + ' (1 week)'} sourceData={baseUrl + '?time=WEEK_1'} />\n              </TabPanel>\n            </Tabs>\n          </TabPanel>\n        </Tabs>\n      </div>\n    );\n  }\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}